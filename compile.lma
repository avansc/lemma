;;;
;; Work-in-progress compiler for Lemma
;; Still needs:
;;  - More special forms:  expand
;;  - Support for metadata (and subsequently doc-strings)
;;  - Better error handling
;;  - Support for aliasing the builtins?  e.g.: (def lambda fn)
;;  - Probably other stuff I'm not thinking of right now...
;;;

(def format lua/string.format)

(def cur-ns :lemma)

;; Map f over xs, then return the concatenated results separated by sep
(defn mapstr [f xs sep]
  (set! sep (if (= sep nil)
                ""
                sep))
  (let [strs (map (fn [a] (str (f a) sep)) xs)]
    (lua/string.sub (str @strs) 1 (- -1 (length sep)))))   ; remove trailing sep

(defn gen-quote [t]
  (fn [x] (str t "(" (mapstr rec-quote x ", ") ")")))

;; Quote is like compile, but it follows a different evaluation strategy.
;; For self-evaluating forms, it delegates the work to compile.
(defn rec-quote [xs]
  (let [types {
    :Symbol   (fn [x] (str "Symbol(\"" (.string x) "\")"))
    :List     (gen-quote :List)
    :Vector   (gen-quote :Vector)
    }]
    (let [t (type xs)]
      (if (types t)
          ((types t) xs)
          (compile xs)))))

(defn handle-quote [xs]
  (rec-quote (first xs)))

;; Translate a list of the form `(a ~b) to a list of the form (list 'a b), etc.
;; I don't think this will nest properly as-is, and it certainly doesn't
;; handle hashmaps.
(defn invert-quasiquote [xs]
  (cond (= :List (type xs))
        (let [x (first xs)]
          (if (and (= :Symbol (type x))
                   (= :unquote (.string x)))
              (second xs)
              (cons 'lua/List (map invert-quasiquote xs))))
        (= :Vector (type xs))
        (cons 'lua/Vector (map invert-quasiquote xs))
      `(quote ~xs)))

(defn handle-quasiquote [xs]
  (compile (second (invert-quasiquote xs))))

(defn handle-fn [xs]
  (let [args (first xs)
        body (rest  xs)]
    (sym-push)
      (let [hyperbanana ["(function("
                         (mapstr sym-new args ", ")
                         ")\n"
                         (let-if [s (sym-vararg?)]
                           (str "local " s " = List(...)\n")
                           "")
                         @(map compile body)]]
        (lua/table.insert hyperbanana (length hyperbanana) "return ")
        (sym-pop)
        ; "\n-- function(" (comma-map (fn[x]x) args) ")\n"
        (str (lua/table.concat hyperbanana) "\nend)"))))

;; TODO: Fexpr handling rather than a specials table.
;;       Such a mechanism will enable defs like: (def lambda fn)
(def specials {
  :ns      (fn [xs]
             (let [ns (first xs)]
               (if (not (string? ns))
                 (lua/Error (str "ns: string expected (Got " (type ns) ")"))
                 (do
                   (set! cur-ns ns)
                   (str "lemma[\"*ns*\"] = " ns ";\n")))))
  :quote   handle-quote
  :quasiquote handle-quasiquote
  :def     (fn [xs]
             (let [k (first  xs)
                   v (second xs)]
               (let [local (if (= 0 (sym-len)) "" "local ")]
                 (str local (sym-new k) " = " (compile v) ";\n"))))
  :set!    (fn [xs]
             (let [k (first  xs)
                   v (second xs)]
               (str (sym-find k) " = " (compile v) ";\n")))
  :fn      handle-fn
  :macro   (fn [xs] (str "Macro" (handle-fn xs)))
  :cond    (fn [xs]
             (let [ks (odds  xs)
                   vs (evens xs)]
               (str "(function()\n"
                 "if (" (compile (first ks)) ") then\nreturn "
                      (compile (first vs))
                 @(map (fn [k v]
                         (str "\nelseif (" (compile k) ") then\nreturn "
                           (compile v)))
                         (rest ks)
                         (rest vs))
                 "\nend\nend)()\n")))
  :and     (fn [xs]
             (str "(" (mapstr compile xs " and ") ")"))
  :or      (fn [xs]
             (str "(" (mapstr compile xs " or ") ")"))
  })

(defn compile [exp]
  (let [types {
    :Number     (fn [x] (.string x))
    :string     (fn [x] (format "%q" x))
    :boolean    (fn [x] (if x :true :false))
    :Nil        (fn [x] :nil)
    :False      (fn [x] :false)
    :Vector     (fn [x] (str "Vectorize{"  (mapstr compile x ", ") "}"))
    :HashMap    (fn [x]
                  (let [mems []]
                  ;; In the imperative style because map produces another hash
                  ;; but we want something we can concat.
                    (for-each (fn [a]
                                (lua/table.insert mems
                                                  (str "["
                                                       (compile (first a))
                                                       "] = "
                                                       (compile (second a))
                                                       ", ")))
                              x)
                    (str "Mapify{" @mems "}")))
    :PreHashMap (fn [x] (compile (lua/HashMap @x)))
    :Symbol     (fn [x] (sym-find x))
    :List       (fn [x]
                  (let [head (first x)]
                    (cond
                      (specials (tostring head))
                        ((specials (tostring head)) (rest x))
                      ;; Currently, macros only work if defined at top level
                      (= :Macro (type (lua/eval head lua/env)))
                        (let [f (get (lua/eval head lua/env) :func)]
                          (compile (f @(rest x))))
                      :else
                        (str (compile head) "("
                             (mapstr compile (rest x) ", ") ")"))))
    :Error      (fn [x] x)
  }]
    (if (types (type exp))
        ((types (type exp)) exp)
        #;(str "-- Whoops! " exp` "\n"))))

#;(loop []
  (lua/io.write "\n> ")
  (let [code (compile (lua/read (lua/FileStream (lua/io.input)) true))]
    (print "-------")
    (print code)
    (print "-------")
    (let [f (lua/assert (lua/loadstring code))]
      (if (= :function (type f))
          (do
            (lua/io.write ";=> ")
            (f))
          (print f))))
  (recur))

(let-if [f (lua/io.open (second *sys-args*))]
  (do
    (loop [code "-- Lemma 0.2 --"]
      (when (not (= (lua/Error :eof) code))
        (lua/io.write (str (or code "") "\n"))
        (recur (compile (lua/read (lua/FileStream f) true)))))
    (lua/io.write "-- EOF --\n")
    (.close f)))
