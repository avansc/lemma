;; This will grow into part of Lemma's standard library.

;; A macro to make defining macros nicer...
(def defmacro
  (macro (name arglist @body)
    `(def ~name (macro ~arglist ~@body))))

;; A macro to make defining functions nicer...
(defmacro defn (name arglist @body)
  `(def ~name (fn ~arglist ~@body)))



;; Get a list containing the odd elements of xs
(defn odds (xs)
  (if (empty? xs)
      '()
      (cons (first xs) (odds (rest (rest xs))))))

;; Get a list containing the even elements of xs
(defn evens (xs)
  (if (empty? xs)
      '()
      (cons (first (rest xs)) (evens (rest (rest xs))))))



;; let
(defmacro let (bindings @body)
  `((fn (~@(odds bindings)) ~@body) ~@(evens bindings)))

;; do
(defmacro do (@body)
  `((fn () ~@body)))


;; This shouldn't be part of the core language, but some of
;; the test code still relies on it.
(defmacro times (n @body)
  `(do
     (defn once (i)
       (if (= i 2)
           (do ~@body)
           (do
             ~@body
             (once (- i 1)))))
     (once ~n)))
